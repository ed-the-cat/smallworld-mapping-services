swagger: '2.0'
info:
  title: Connectivity Service
  description: Connectivity Service
  version: 0.0.1
schemes:
  - https
produces:
  - application/json
securityDefinitions:
  oauth:
    type: oauth2
    authorizationUrl: 'https://your-trusted-issuer.example.com'
    flow: implicit
    scopes: {}
paths:
  /v1/versions:
    get:
      summary: Gets the set of versions available in the database
      description: |
        Gets the set of versions available in the database.
      security:
        - oauth: []
      parameters:
        - $ref: '#/parameters/tenantId'
      produces:
        - application/json
      tags:
        - Versions
      responses:
        '200':
          description: >
            Get operation was successful, response is a JSON array of all the
            versions available.
          schema:
            $ref: '#/definitions/VersionRequest'
        '400':
          description: |
            Bad request.
        '500':
          description: Unexpected error.
  '/v1/versions/{targetVersion}/network-status':
    get:
      summary: |
        Gets the current status of the topology view for the given version.
      description: >
        Gets the current status of the topology view for the given version. If
        it is not valid then topology needs to be refreshed.
      security:
        - oauth: []
      parameters:
        - $ref: '#/parameters/tenantId'
        - $ref: '#/parameters/targetVersion'
      tags:
        - Data Ingestion
      responses:
        '200':
          description: >
            Get operation was successful, response is the status of the network
            specified.
          schema:
            $ref: '#/definitions/NetworkStatusOutput'
        '400':
          description: 'Bad request, one of the parameters was entered incorrectly.'
        '500':
          description: Unexpected error.
  /v1/refresh-topology:
    post:
      summary: Post request to refresh topology view
      description: |
        Post request to refresh the topology view.
      security:
        - oauth: []
      parameters:
        - $ref: '#/parameters/tenantId'
      consumes:
        - application/json
      tags:
        - Data Ingestion
      responses:
        '204':
          description: |
            Post operation was successful, topology refresh executed.
        '400':
          description: 'Bad request, one of the parameters was entered incorrectly.'
        '500':
          description: Unexpected error.
  '/v1/versions/{versionSelector}/resources/{resourceType}/{resourceId}':
    get:
      summary: >-
        Gets the resource of the given ID from the resource-type and version
        specified
      description: >
        Gets the resource from the specified object types and version.

        Data pulled from this request is more detailed than when pulled as a
        set.
      security:
        - oauth: []
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/tenantId'
        - $ref: '#/parameters/versionSelector'
        - $ref: '#/parameters/resourceType'
        - $ref: '#/parameters/resourceId'
        - $ref: '#/parameters/includeSpatial'
      tags:
        - Connectivity Queries
      responses:
        '200':
          description: >
            Get operation was successful, response is a JSON object of the
            resources that match the type and ID given.
          schema:
            $ref: '#/definitions/ResourceIdOutput'
        '400':
          description: |
            Bad request, one of the parameters was entered incorrectly.
        '404':
          description: 'The version, resource type or resource ID specified was not found.'
        '500':
          description: Unexpected error.
  '/v1/versions/{versionSelector}/resources/{resourceType}/{resourceId}/query/{queryType}':
    post:
      summary: Post request to run a query
      description: >
        Post a request to query a set of resources using the specified ID as a
        reference (start node).
      security:
        - oauth: []
      parameters:
        - $ref: '#/parameters/tenantId'
        - $ref: '#/parameters/versionSelector'
        - $ref: '#/parameters/resourceType'
        - $ref: '#/parameters/resourceId'
        - $ref: '#/parameters/queryType'
        - $ref: '#/parameters/limitType'
        - $ref: '#/parameters/offsetType'
        - name: body
          in: body
          description: >
            Contains other parameters which may be required for the query to
            execute.
          required: true
          schema:
            $ref: '#/definitions/Query'
      produces:
        - application/json
      consumes:
        - application/json
      tags:
        - Connectivity Queries
      responses:
        '200':
          description: >
            Post operation was successful, response is a JSON array of the query
            results.
          schema:
            $ref: '#/definitions/QueryOutput'
        '400':
          description: 'Bad request, one of the parameters was entered incorrectly.'
        '404':
          description: Resource not found.
        '500':
          description: Unexpected error.
  '/v1/versions/{targetVersion}':
    delete:
      summary: Deletes the specified version and all data within it
      description: |
        Deletes the specified version and all data within that version.
      security:
        - oauth: []
      parameters:
        - $ref: '#/parameters/tenantId'
        - $ref: '#/parameters/targetVersion'
      tags:
        - Versions
      responses:
        '204':
          description: >
            Delete operation was successful. The version and its data has been
            deleted.
          schema:
            $ref: '#/definitions/VersionDeleteOutput'
        '400':
          description: 'Bad request, one of the parameters was entered incorrectly.'
        '404':
          description: The version specified was not found.
        '500':
          description: Unexpected error.
  '/v1/uploads/versions/{targetVersion}/complete':
    post:
      summary: Posts new file to the ingestion service
      description: >
        Asynchronously posts either a CIM (XML) file or a zip file (containing
        XML and GML data files) to the service and version specified.
      security:
        - oauth: []
      parameters:
        - $ref: '#/parameters/maxRetries'
        - $ref: '#/parameters/tenantId'
        - $ref: '#/parameters/targetVersion'
        - name: body
          in: body
          description: |
            CIM or zip file to post to the server
          required: true
          schema:
            $ref: '#/definitions/ResourceUploadRequest'
      produces:
        - application/json
      consumes:
        - application/octet-stream
        - application/xml
      tags:
        - Data Ingestion
      responses:
        '201':
          description: >
            Post operation successfully posted data for ingestion. Track the
            returned ticket to monitor progress.
          schema:
            $ref: '#/definitions/ResourceRequestOutput'
        '400':
          description: 'Bad request, one of the parameters was entered incorrectly.'
        '500':
          description: Unexpected error.
  /v1/uploads/tickets:
    get:
      summary: Gets tickets with state for a tenant.
      description: >
        Gets all tickets with status for the specified tenant and, optionally,
        can be filtered via status
      security:
        - oauth: []
      parameters:
        - $ref: '#/parameters/tenantId'
        - $ref: '#/parameters/statusFilter'
      produces:
        - application/json
      tags:
        - Data Ingestion
      responses:
        '200':
          description: >
            Get operation was successful, response is a JSON object which
            includes all tickets and their status for the specified tenant.
          schema:
            $ref: '#/definitions/TicketsRequest'
        '400':
          description: |
            Status filter provided is incorrect.
        '500':
          description: Unexpected error.
  '/v1/uploads/tickets/{ticketNumber}':
    get:
      summary: Gets the status of a ticket.
      description: |
        Gets the status of the specified ticket number.
      security:
        - oauth: []
      parameters:
        - $ref: '#/parameters/tenantId'
        - $ref: '#/parameters/ticketNumber'
      produces:
        - application/json
      tags:
        - Data Ingestion
      responses:
        '200':
          description: >
            Get operation was successful, response is the status of the
            specified ticket number.
          schema:
            $ref: '#/definitions/StatusRequest'
        '404':
          description: |
            Ticket number did not exist.
        '500':
          description: Unexpected error.
    delete:
      summary: Deletes the ticket provided
      description: |
        Deletes the ticket provided and its staged data.
      security:
        - oauth: []
      parameters:
        - $ref: '#/parameters/tenantId'
        - $ref: '#/parameters/ticketNumber'
      produces:
        - application/json
      tags:
        - Data Ingestion
      responses:
        '200':
          description: |
            Delete operation was successful. Ticket deleted
          schema:
            $ref: '#/definitions/DeleteTicketRequest'
        '403':
          description: |
            Ticket number had a status that doesn't allow deletion.
        '404':
          description: |
            Ticket number did not exist.
        '500':
          description: Unexpected error.
  '/v1/uploads/tickets/{ticketNumber}/retry':
    post:
      summary: Post request to retry ingestion for a ticket
      description: >
        Post request to retry ingestion of the data associated with the given
        ticket.

        This can only be called for tickets with a status of "failed-to-process"
        or "queuing-error".
      security:
        - oauth: []
      parameters:
        - $ref: '#/parameters/tenantId'
        - $ref: '#/parameters/ticketNumber'
        - name: body
          in: body
          description: >
            An empty JSON object. Required for compatibility with future
            updates, which may use this object.
          required: true
          schema:
            $ref: '#/definitions/RetryRequest'
      consumes:
        - application/json
      tags:
        - Data Ingestion
      responses:
        '204':
          description: >
            Delete operation was successful. Ticket has been successfully
            requeued for ingestion.
        '403':
          description: |
            Ticket is not allowed to be requeued.
        '404':
          description: |
            Ticket does not exist.
        '500':
          description: Unexpected error.
  '/v1/versions/{targetVersion}/maps/v1/collections':
    get:
      summary: Gets list of all collections
      description: |
        Gets names of all the collections for a given tenant and target version.
      security:
        - oauth: []
      parameters:
        - $ref: '#/parameters/tenantId'
        - $ref: '#/parameters/targetVersion'
      produces:
        - application/json
      tags:
        - Spatial Queries
      responses:
        '200':
          description: >-
            Get operation was successful. Response is a JSON array containing
            all of the collection names.
          schema:
            $ref: '#/definitions/CollectionNames'
        '500':
          description: Unexpected error.
  '/v1/versions/{targetVersion}/maps/v1/collections/{collectionName}':
    get:
      summary: Gets all data for a collection
      description: >
        Gets the full GeoJSON FeatureCollection uploaded for this collection.

        All GeoJSON Features will be as originally uploaded with the addition of
        a featureId attribute that uniquely identifies the feature across all
        your collections.
      security:
        - oauth: []
      produces:
        - application/json
      tags:
        - Spatial Queries
      responses:
        '200':
          description: Get operation was successful. Response is a collection of features.
          schema:
            $ref: '#/definitions/FeatureCollectionWithFeatureId'
        '404':
          description: Collection could not be found.
        '500':
          description: Unexpected error.
      parameters:
        - $ref: '#/parameters/collectionName'
        - $ref: '#/parameters/tenantId'
        - $ref: '#/parameters/targetVersion'
  '/v1/versions/{targetVersion}/maps/v1/collections/{collectionName}/spatial-query':
    post:
      summary: >
        For 'within' operator - find all points within an area.

        For 'nearest' operator - return the nearest point to the one specified.

        For 'lineIntersectsLine' - find all points of intersection between two
        linestrings.
      description: >
        'Within' returns GeoJSON of type FeatureCollection containing all
        GeoJSON features within the provided polygon.

        'Nearest' returns a FeatureCollection with the longitude and latitude of
        the nearest point.

        'LineIntersectsLine' returns a FeatureCollection containing all points
        of intersection as GeoJSON features.
      security:
        - oauth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/collectionName'
        - $ref: '#/parameters/tenantId'
        - $ref: '#/parameters/targetVersion'
        - name: operator
          description: >
            For 'within' query - a GeoJSON object containing a polygon which we
            wish to search.

            For 'nearest' query - a GeoJSON object containing the longitude and
            latitude for a point.

            For 'lineIntersectsLine' - a GeoJSON object containing an array of
            two string IDs for GeoJSON linestrings
          required: true
          type: string
          enum:
            - within
            - nearest
            - lineIntersectsLine
          in: query
        - name: body
          in: body
          description: |
            An object with longitude and latitude of the specified point.
          required: true
          schema:
            $ref: '#/definitions/QueryGeometry'
      tags:
        - Spatial Queries
      responses:
        '200':
          description: >-
            Post operation was successful. Response is a collection containing
            the nearest feature.
          schema:
            $ref: '#/definitions/FeatureCollectionWithFeatureId'
        '400':
          description: |
            Incorrect longitude or latitude.
        '404':
          description: |
            Named collection not found.
        '500':
          description: Unexpected error.
  '/v1/versions/{targetVersion}/maps/v1/collections/{collectionName}/spatial-query/bbox-interacts':
    get:
      summary: Gets collection features in specified bounding box
      description: >
        Gets all features in the specified collection that exist fully or
        partially within the specified bounding box.

        The bounding box is defined by two coordinates in the EPSG:4326 (WGS84)
        (for further details see http://epsg.io/4326):

        * left (longitude), bottom (latitude)

        * right (longitude), top (latitude)
      security:
        - oauth: []
      parameters:
        - $ref: '#/parameters/collectionName'
        - $ref: '#/parameters/tenantId'
        - $ref: '#/parameters/targetVersion'
        - name: left
          in: query
          description: Left longitude coordinate of bounding box.
          required: true
          type: number
        - name: right
          in: query
          description: Right longitude coordinate of bounding box.
          required: true
          type: number
        - name: top
          in: query
          description: Top latitude coordinate of bounding box.
          required: true
          type: number
        - name: bottom
          in: query
          description: Bottom latitude coordinate of bounding box.
          required: true
          type: number
      tags:
        - Spatial Queries
      responses:
        '200':
          description: >-
            Get operation was successful. A GeoJSON feature collection is
            returned.
          schema:
            $ref: '#/definitions/FeatureCollectionWithFeatureId'
        '404':
          description: Collection does not exist.
        '500':
          description: Unexpected error.
  '/v1/versions/{targetVersion}/maps/v1/collections/{collectionName}/features':
    get:
      summary: Gets features
      description: >
        Gets GeoJSON of type FeatureCollection containing all GeoJSON features
        from the named collection with a matching GeoJSON id.
      security:
        - oauth: []
      parameters:
        - $ref: '#/parameters/collectionName'
        - $ref: '#/parameters/featureId'
        - $ref: '#/parameters/tenantId'
        - $ref: '#/parameters/targetVersion'
      tags:
        - Spatial Queries
      responses:
        '200':
          description: >-
            Get operation was successful. GeoJSON FeatureCollection containing
            0, 1 or more GeoJSON features is returned.
          schema:
            $ref: '#/definitions/FeatureCollectionWithFeatureId'
        '404':
          description: Collection does not exist.
        '500':
          description: Unexpected error.
  '/v1/versions/{targetVersion}/maps/v1/collections/{collectionName}/collectionSize':
    get:
      summary: Gets the size of a collection.
      description: >
        Gets the size of the specified collection to decide whether to use the
        whole collection for spatial query or not.
      security:
        - oauth: []
      parameters:
        - $ref: '#/parameters/tenantId'
        - $ref: '#/parameters/collectionName'
        - $ref: '#/parameters/targetVersion'
      tags:
        - Spatial Queries
      produces:
        - application/json
      responses:
        '200':
          description: >-
            Get operation was successful. Response is the size of given
            collection.
          schema:
            $ref: '#/definitions/GetCollectionSizeSchema'
        '404':
          description: Specified collection was not found.
        '500':
          description: Unexpected error
  /v1/build-info:
    get:
      summary: >-
        Gets a JSON object which contains the application's build version and
        its time stamp.
      description: >
        Gets a JSON object which contains the application's build version and
        its time stamp.
      produces:
        - application/json
      tags:
        - Build
      responses:
        '200':
          description: >
            Get operation was successful, response is a JSON object containing
            the application's build version and its time stamp.
          schema:
            $ref: '#/definitions/BuildRequest'
        '400':
          description: |
            Bad request, one of the parameters was entered incorrectly.
        '500':
          description: Unexpected error.
parameters:
  tenantId:
    name: predix-zone-id
    description: >-
      The tenant identifier.  For Predix, this is the instanceId value specified
      in the VCAP-SERVICES environment variable.
    in: header
    pattern: >-
      ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
    required: true
    type: string
    format: uuid
  resourceId:
    name: resourceId
    in: path
    description: Resource identifier.
    required: true
    type: string
    pattern: '^[A-Za-z0-9_\-\.]+$'
  resourceType:
    name: resourceType
    in: path
    description: Resource type identifier.
    required: true
    type: string
    pattern: '^[A-Za-z0-9.]+$'
  versionSelector:
    name: versionSelector
    in: path
    description: Version identifier.
    required: true
    type: string
    maxLength: 50
    pattern: '^[A-Za-z0-9_\-\:]+$'
  targetVersion:
    name: targetVersion
    in: path
    description: Version identifier.
    required: true
    type: string
    maxLength: 50
    pattern: '^[A-Za-z0-9_\-\:]+$'
  queryType:
    name: queryType
    description: |
      Query identifier. Possible values include: trace.
    in: path
    required: true
    type: string
    enum:
      - trace
  limitType:
    name: limit
    in: query
    description: Maximum number of records to return.
    type: integer
    minimum: 1
  offsetType:
    name: offset
    description: Number of records to skip before returning.
    in: query
    type: integer
    minimum: 0
  includeSpatial:
    name: includeSpatial
    in: query
    description: Used to ask for spatial data on the feature being queried
    required: false
    type: boolean
  ticketNumber:
    name: ticketNumber
    description: ticket identifier.
    in: path
    type: string
    required: true
  statusFilter:
    name: statusFilter
    description: List of statuses used to filter the response.
    in: query
    type: string
    required: false
  maxRetries:
    name: maxRetries
    description: |
      Maximum number of times to retry ingestion if an error occurs
    in: query
    required: false
    type: integer
    minimum: 0
  collectionName:
    name: collectionName
    description: Name of asset collection.
    in: path
    required: true
    type: string
  featureId:
    name: id
    in: query
    description: Feature identifier.
    required: true
    type: string
    minLength: 1
  instanceId:
    name: instanceId
    in: path
    description: Instance identifier.
    required: true
    type: string
    pattern: >-
      ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
  bindingId:
    name: bindingId
    in: path
    description: Binding identifier.
    required: true
    type: string
    pattern: .+
  brokername:
    name: brokername
    in: path
    description: Broker identifier.
    required: true
    type: string
    pattern: '^[A-Za-z0-9_-]+$'
definitions:
  Query:
    type: object
    description: |
      JSON object containing parameters required for the requested query type.
  VersionRequest:
    type: object
    description: |
      JSON array of the versions in the system.
    properties:
      results:
        type: array
        description: >-
          Contains an array of versions in the system. Normal and operational
          selectors are reserved.
        items:
          type: object
          properties:
            network:
              type: string
              description: Network name.
  StatusRequest:
    type: object
    description: |
      JSON array of the status of a given ticket.
    properties:
      ticket:
        type: string
        description: The ticket number.
      status:
        type: string
        description: The upload status of the ticket.
  DeleteTicketRequest:
    type: object
    properties:
      ticket:
        type: string
  TicketsRequest:
    type: object
    properties:
      ticketNumber:
        type: string
        description: The status of that ticket.
  ResourceUploadRequest:
    description: |
      Contains the CIM file for upload.
  ResourceUploadRequestDevOnly:
    type: object
    description: |
      Contains CIM file for upload.
  ResourceRequestOutput:
    type: object
    description: |
      JSON object detailing the success of the uploaded CIM object.
    properties:
      ticket:
        type: string
        description: The ticket number the service has assigned to your upload.
  ResourceTypeRequest:
    type: object
    description: >
      JSON object of all the resources of the type with enough information for
      display purposes.
    properties:
      results:
        type: object
        description: Array of general information on the resources being requested.
  RetryRequest:
    type: object
    description: >
      Additional parameters to be passed to the retry request. Currently this
      should be left blank.
  QueryOutput:
    type: object
    description: |
      JSON array of results from querying the database.
    properties:
      results:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
            type:
              type: string
        description: Contains parameters for tracing.
  ResourceIdOutput:
    type: object
    description: |
      JSON object of the specific resource being requested.
    properties:
      resourceID:
        type: object
        description: Attributes that belong to the resource queried.
        properties:
          connectivity:
            description: Connectivity data of the resource being queried. Always present.
            type: object
            properties:
              id:
                type: string
              type:
                type: string
              attributes:
                type: object
                properties:
                  propertyName:
                    type: array
                    items:
                      type: string
                  assets:
                    type: array
                    items:
                      type: object
                    description: Resource attributes related to the resource being queried.
          spatial:
            type: object
            description: >-
              Describes the spatial data of the resource queried. Present if
              includeSpatial parameter is set to true.
            properties:
              type:
                type: string
              features:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                    id:
                      type: string
                    properties:
                      type: object
                    geometry:
                      type: object
                      properties:
                        type:
                          type: string
                        coordinates:
                          type: array
                          items:
                            type: number
                            format: float
  TerminalsOutput:
    type: object
    description: |
      JSON object of the terminals for the specific resource being requested.
  ConnectionsOutput:
    type: object
    description: >
      JSON object of the connected equipment for the specific resource being
      requested.
  NetworkStatusOutput:
    type: object
    properties:
      network:
        type: string
        description: The name of the network
      status:
        type: string
        description: The status of the network.
    description: |
      JSON object of the network status for the given version.
  VersionDeleteOutput:
    type: object
  FeatureCollectionWithFeatureId:
    type: object
    properties:
      type:
        type: string
      features:
        type: array
        items:
          type: object
          properties:
            type:
              type: string
            id:
              type: string
            properties:
              type: object
            geometry:
              type: object
              properties:
                type:
                  type: string
                coordinates:
                  type: array
                  items:
                    type: number
                    format: float
    description: |
      Standard GeoJSON FeatureCollection with each Feature tagged with a
      featureId.
  CollectionNames:
    description: An array of collection names.
    type: object
    properties:
      collections:
        type: array
        items:
          type: string
  QueryGeometry:
    type: object
    description: >
      GeoJSON geometry, or an object with longitude/latitude. All coordinates in
      ESPG:4326 (WGS84).
    properties:
      longitude:
        type: number
      latitude:
        type: number
  GetCollectionSizeSchema:
    type: object
    properties:
      collection_size:
        type: number
        description: The size of the specified collection.
  ProvisioningInput:
    type: object
    properties:
      parameters:
        type: object
        description: |
          Configuration parameters for the instance.
        properties:
          trustedIssuerIds:
            type: array
            description: |
              Trusted token provider URLs.
            items:
              type: string
              pattern: '^https?:\/\/[A-Za-z0-9_.~!$&()*+,=:@%/-]*$'
            minItems: 1
        required:
          - trustedIssuerIds
    required:
      - parameters
  BindingInput:
    type: object
    description: |
      Binding configuration parameters.
    properties:
      service_id:
        type: string
        description: >
          The ID of the service to which to bind, defined in the service
          catalog.
      plan_id:
        type: string
        description: |
          The ID of the plan to which to bind, defined in the service catalog.
    required:
      - service_id
      - plan_id
  BuildRequest:
    type: object
    description: |
      JSON object containing build information.
    properties:
      buildVersion:
        type: string
      buildTimeStamp:
        type: string
