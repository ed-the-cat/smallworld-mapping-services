swagger: '2.0'
info:
  title: Intelligent Mapping
  description: Intelligent Mapping services for geospatial data management and viewing
  version: 0.0.1
schemes:
  - https
produces:
  - application/json
parameters:
  zoneId:
    name: predix-zone-id
    description: |
      The Predix zone identifier. This is the instanceId value specified in the
      VCAP-SERVICES environment variable.
    in: header
    pattern: >-
      ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
    required: true
    type: string
    format: uuid
  subtenant:
    name: x-subtenant-id
    description: The customer identifier.
    in: header
    required: true
    type: string
    maxLength: 50
  collectionName:
    name: collectionName
    description: Name of collection.
    in: path
    required: true
    type: string
  featureId:
    name: id
    in: query
    description: Feature identifier.
    required: true
    type: string
    minLength: 1
  featureBody:
    name: body
    in: body
    description: GeoJSON feature.
    required: true
    schema:
      type: object
  radius:
    name: radius
    description: >
      Cluster radius in pixels. Used to control how points cluster. Default
      value is 80.
    required: false
    default: 80
    type: integer
    minimum: 1
    in: query
  zoomLevel:
    name: zoomLevel
    description: |
      Zoom level used to return clusters. Default value is 0. Range is 0 to 20.
    required: true
    type: integer
    minimum: 0
    maximum: 20
    in: query
  rebuildIndex:
    name: rebuildIndex
    description: |
      If set then the super cluster index will be re-built from the collection.
    required: false
    type: boolean
    in: query
  left:
    name: left
    description: |
      The longitude value of the left coordinate of the bounding box.
      Maximum value of 180, minimum -180.
    required: true
    type: number
    in: query
    maximum: 180
    minimum: -180
  right:
    name: right
    description: |
      The longitude value of the right coordinate of the bounding box.
      Maximum value of 180, minimum -180.
    required: true
    type: number
    in: query
    maximum: 180
    minimum: -180
  top:
    name: top
    description: |
      The latitude value of the top coordinate of the bounding box.
      Maximum value of 90, minimum -90.
    required: true
    type: number
    in: query
    maximum: 90
    minimum: -90
  bottom:
    name: bottom
    description: |
      The latitude value of the bottom coordinate of the bounding box.
      Maximum value of 90, minimum -90.
    required: true
    type: number
    in: query
    maximum: 90
    minimum: -90
  mapId:
    name: mapId
    description: The map identifier.
    in: path
    required: true
    type: string
    pattern: >-
      ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
    format: uuid
  layerId:
    name: layerId
    description: The layer identifier.
    in: path
    pattern: >-
      ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
    required: true
    type: string
    format: uuid
  mapbody:
    name: body
    description: Map name.
    in: body
    required: true
    schema:
      type: object
      required:
        - name
      properties:
        base_map:
          type: string
          minLength: 1
        map_center:
          type: array
          items:
            type: number
        name:
          type: string
          minLength: 1
          maxLength: 50
        zoom_level:
          type: integer
  layerbody:
    name: body
    description: Layer name.
    in: body
    required: true
    schema:
      type: object
      required:
        - name
        - uri
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
        uri:
          type: string
          minLength: 1
        visible:
          type: boolean
  layerorder:
    name: body
    description: Layer ids in new order.
    in: body
    required: true
    schema:
      type: object
      required:
        - layers
      properties:
        layers:
          type: array
          items:
            $ref: '#/definitions/LayerOrderId'
securityDefinitions:
  oauth:
    type: oauth2
    authorizationUrl: $UAA_URL
    flow: implicit
paths:
  /v1/collections:
    get:
      summary: List all data collections for a customer
      description: |
        Returns an array containing the names of all data collections for the
        specified customer.
      tags:
        - Collections
      security:
        - oauth: []
      parameters:
        - $ref: '#/parameters/zoneId'
        - $ref: '#/parameters/subtenant'
      responses:
        '200':
          x-predix-response: default
          description: An object containing an array of collection names.
          schema:
            $ref: '#/definitions/Collections'
        default:
          description: Unexpected error.
  '/v1/collections/{collectionName}':
    get:
      summary: Return all data for a collection
      description: |
        Returns the full GeoJSON FeatureCollection uploaded for this collection.
        All GeoJSON Features will be as originally uploaded with the addition of
        a featureId attribute that uniquely identifies the feature across all
        your collections.
      security:
        - oauth: []
      parameters:
        - $ref: '#/parameters/zoneId'
        - $ref: '#/parameters/subtenant'
        - $ref: '#/parameters/collectionName'
      tags:
        - Collections
      responses:
        '200':
          x-predix-response: default
          description: A GeoJSON feature collection is returned.
          schema:
            $ref: '#/definitions/FeatureCollectionWithFeatureId'
        '404':
          x-predix-response: notfound
          description: Collection could not be found.
        default:
          x-predix-response: error
          description: Unexpected error.
    post:
      summary: Add a new collection
      description: |
        Add a new collection of data in the form of a GeoJSON FeatureCollection.
        All coordinates must be in EPSG:4326 (WGS84) (for further details see
        http://epsg.io/4326). Any feature that is not compliant with the GeoJSON
        specification will not be stored. If the specified collection already
        exists, the geospatial data will be appended to the existing data.
      security:
        - oauth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/zoneId'
        - $ref: '#/parameters/subtenant'
        - $ref: '#/parameters/collectionName'
        - name: body
          in: body
          description: Geospatial data for the collection.
          required: true
          schema:
            $ref: '#/definitions/FeatureCollection'
      tags:
        - Collections
      responses:
        '200':
          x-predix-response: default
          description: |
            Success. Response is a summary of the number of features sent, the
            number of features successfully stored and the number of features
            rejected.
          schema:
            $ref: '#/definitions/AddCollectionSuccessSchema'
        '400':
          x-predix-response: nofeatures
          description: Invalid request (no contents parameter or invalid GeoJSON).
        default:
          x-predix-response: error
          description: Unexpected error.
    delete:
      summary: Delete a collection
      description: |
        Delete the collection of data specified by the collection name.
      security:
        - oauth: []
      parameters:
        - $ref: '#/parameters/zoneId'
        - $ref: '#/parameters/subtenant'
        - $ref: '#/parameters/collectionName'
      tags:
        - Collections
      responses:
        '200':
          x-predix-response: default
          description: 'Success, collection has been deleted (empty response).'
        '404':
          x-predix-response: notfound
          description: Specified collection does not exist.
        default:
          description: Unexpected error.
  '/v1/collections/{collectionName}/spatial-query/bbox-interacts':
    get:
      summary: Return collection features in specified bounding box
      description: |
        Returns all features in the specified collection that exist fully or
        partially within the specified bounding box. The bounding box is defined
        by two coordinates in the EPSG:4326 (WGS84) (for further details see
        http://epsg.io/4326):

        * left (longitude), bottom (latitude)

        * right (longitude), top (latitude)
      security:
        - oauth: []
      parameters:
        - $ref: '#/parameters/zoneId'
        - $ref: '#/parameters/subtenant'
        - $ref: '#/parameters/collectionName'
        - $ref: '#/parameters/left'
        - $ref: '#/parameters/right'
        - $ref: '#/parameters/top'
        - $ref: '#/parameters/bottom'
      tags:
        - Query
      responses:
        '200':
          x-predix-response: default
          description: A GeoJSON feature collection is returned.
          schema:
            $ref: '#/definitions/FeatureCollectionWithFeatureId'
        '404':
          x-predix-response: notfound
          description: Collection does not exist.
        default:
          description: Unexpected error.
  '/v1/collections/{collectionName}/features':
    get:
      summary: Return feature
      description: >
        Returns GeoJSON of type FeatureCollection containing all GeoJSON
        features

        from the named collection with a matching GeoJSON id.
      security:
        - oauth: []
      parameters:
        - $ref: '#/parameters/zoneId'
        - $ref: '#/parameters/subtenant'
        - $ref: '#/parameters/collectionName'
        - $ref: '#/parameters/featureId'
      tags:
        - Collections
      responses:
        '200':
          x-predix-response: default
          description: >-
            GeoJSON FeatureCollection containing 0, 1 or more GeoJSON features
            is returned.
          schema:
            $ref: '#/definitions/FeatureCollectionWithFeatureId'
        '404':
          x-predix-response: notfound
          description: Collection does not exist.
        default:
          description: Unexpected error.
    delete:
      security:
        - oauth: []
      summary: >-
        Delete from the named collection all features with a matching GeoJSON
        id.
      description: >
        Delete from the named collection all features with a matching GeoJSON
        id. This could be 0, 1 or many features.
      parameters:
        - $ref: '#/parameters/zoneId'
        - $ref: '#/parameters/subtenant'
        - $ref: '#/parameters/collectionName'
        - $ref: '#/parameters/featureId'
      tags:
        - Collections
      responses:
        '200':
          x-predix-response: default
          description: >-
            Operation was a success. Response includes the number of features
            updated.
          schema:
            $ref: '#/definitions/DeleteFeaturesSuccessSchema'
        '400':
          description: Bad request.
        '404':
          x-predix-response: notfound
          description: Named collection not found.
        default:
          description: Unexpected error.
    post:
      summary: Insert an individual feature into a collection.
      description: >
        Insert a new feature into the the named collection. The GeoJSON id is
        used to identify the feature.

        The GeoJSON id included in the url must match the top level id member of
        the feature provided.
      parameters:
        - $ref: '#/parameters/zoneId'
        - $ref: '#/parameters/subtenant'
        - $ref: '#/parameters/collectionName'
        - $ref: '#/parameters/featureId'
        - $ref: '#/parameters/featureBody'
      tags:
        - Collections
      security:
        - oauth: []
      responses:
        '204':
          x-predix-response: default
          description: Operation was a success. The feature was inserted.
        '400':
          x-predix-response: badrequest
          description: >
            Bad request. Feature not provided or an invalid feature provided or
            feature id member value does not match

            the id provided in the uri.
        '404':
          x-predix-response: notfound
          description: Named collection not found.
        default:
          description: Unexpected error.
    put:
      summary: Update all features in a collection with a matching GeoJSON id.
      description: >
        Updates the attributes and geometry of matching features in the named
        collection.  This could be 0, 1 or many features.
      parameters:
        - $ref: '#/parameters/zoneId'
        - $ref: '#/parameters/subtenant'
        - $ref: '#/parameters/collectionName'
        - $ref: '#/parameters/featureId'
        - $ref: '#/parameters/featureBody'
      tags:
        - Collections
      security:
        - oauth: []
      responses:
        '200':
          x-predix-response: default
          description: >-
            Operation was a success. Response includes the number of features
            updated.
          schema:
            $ref: '#/definitions/UpdateFeaturesSuccessSchema'
        '400':
          x-predix-response: badrequest
          description: >
            Bad request. Feature not provided or an invalid feature provided or
            feature id member value does not match

            the id provided in the url.
        '404':
          x-predix-response: notfound
          description: Named collection not found.
        default:
          description: Unexpected error.
  '/v1/collections/{collectionName}/collectionSize':
    get:
      summary: Return the size of a collection.
      description: >
        Returns the size of the specified collection to decide whether to use
        the whole collection for spatial query

        or not.
      security:
        - oauth: []
      parameters:
        - $ref: '#/parameters/zoneId'
        - $ref: '#/parameters/subtenant'
        - $ref: '#/parameters/collectionName'
      tags:
        - Collections
        - Query
      produces:
        - application/json
      responses:
        '200':
          x-predix-response: default
          description: Operation was successful. Response is the size of given collection.
          schema:
            $ref: '#/definitions/GetCollectionSizeSchema'
        '404':
          x-predix-response: notfound
          description: Specified collection was not found.
        default:
          description: Unexpected error
  '/v1/collections/{collectionName}/spatial-query':
    post:
      summary: |
        For 'within' operator - find all points within an area.
        For 'nearest' operator - return the nearest point to the one specified.
      description: >
        'Within' returns GeoGJSON of type FeatureCollection containing all
        GeoJSON features within the provided polygon.

        'Nearest' returns a FeatureCollection with the longitude and latitude of
        the nearest point.
      security:
        - oauth: []
      parameters:
        - $ref: '#/parameters/zoneId'
        - $ref: '#/parameters/subtenant'
        - $ref: '#/parameters/collectionName'
        - name: operator
          description: |
            The type of spatial query. Can be 'within' or 'nearest'
          required: true
          type: string
          enum:
            - within
            - nearest
          in: query
        - name: body
          in: body
          description: >
            For 'within' query - a geojson polygon which we wish to search.

            For 'nearest' query - an object with longitude and latitude of the
            point.
          required: true
          schema:
            $ref: '#/definitions/QueryGeometry'
      tags:
        - Collections
        - Query
      responses:
        '200':
          x-predix-response: default
          description: Operation was a success. Response is a collection of features.
          schema:
            $ref: '#/definitions/FeatureCollectionWithFeatureId'
        '400':
          x-predix-response: badrequest
          description: |
            Operator was invalid
            Request contained invalid geojson
            Contained geoJSON has incorrect geometry
        '404':
          x-predix-response: notfound
          description: |
            Named collection not found.
        default:
          description: Unexpected error
  '/v1/collections/{collectionName}/text':
    get:
      summary: Free text search of a feature collection
      description: >
        Returns GeoJSON of type FeatureCollection containing all GeoJSON
        features from the named collection that match

        the supplied search string.


        The search text consists of one or more strings that can be space or
        comma separated. A match with a given

        feature occurs only if an exact match can be found for each of the
        strings in the search text amongst a

        concatenation of the values of child members of the top level
        'properties' member of the feature,

        together with the value of its GeoJSON id. The matching is case
        insensitve, partial matches and

        wildcard searching is not supported.


        Examples of search text:

         - 28,West End,Histon
         - 240.000 V
         - Company Owned
      security:
        - oauth: []
      parameters:
        - $ref: '#/parameters/zoneId'
        - $ref: '#/parameters/subtenant'
        - $ref: '#/parameters/collectionName'
        - name: q
          description: >
            The search text. Consists of a list of one or more strings.  The
            strings in the list can be space or comma
             separated.
          required: true
          type: string
          in: query
          minLength: 1
      tags:
        - Collections
        - Query
      responses:
        '200':
          x-predix-response: default
          description: >-
            GeoJSON FeatureCollection containing 0, 1 or more GeoJSON features
            is returned.
          schema:
            $ref: '#/definitions/FeatureCollectionWithFeatureId'
        '404':
          x-predix-response: notfound
          description: Collection does not exist.
        default:
          description: Unexpected error.
  '/v1/collections/{collectionName}/cluster':
    get:
      summary: >-
        Returns clustering data for collection features in specified bounding
        box
      description: |
        Returns Clustering data for the specified collection that exist fully
         or partially within the specified bounding box. The bounding box is
         defined by two coordinates in the EPSG:4326 (WGS84)
         (for further details see http://epsg.io/4326):
         * left (longitude), bottom (latitude)
         * right (longitude), top (latitude)
      security:
        - oauth: []
      parameters:
        - $ref: '#/parameters/zoneId'
        - $ref: '#/parameters/subtenant'
        - $ref: '#/parameters/collectionName'
        - $ref: '#/parameters/radius'
        - $ref: '#/parameters/zoomLevel'
        - $ref: '#/parameters/rebuildIndex'
        - $ref: '#/parameters/left'
        - $ref: '#/parameters/top'
        - $ref: '#/parameters/right'
        - $ref: '#/parameters/bottom'
      tags:
        - Query
      responses:
        '200':
          x-predix-response: default
          description: A GeoJSON feature collection is returned.
          schema:
            $ref: '#/definitions/FeatureCollectionWithFeatureId'
        '400':
          x-predix-responce: badrequest
          description: >
            Bad request. Required parameter zoomLevel was not supplied or the
            bounding box

            was invalid.
        '404':
          x-predix-response: notfound
          description: Collection does not exist.
        default:
          description: Unexpected error.
  /v1/maps:
    get:
      summary: List all maps for a customer
      description: |
        Returns an array of maps for the specified customer. The array contains
        the name and identifier for each map.
      security:
        - oauth: []
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/zoneId'
        - $ref: '#/parameters/subtenant'
      tags:
        - Map
        - View
      responses:
        '200':
          x-predix-response: default
          description: An array of map names and their unique identifiers is returned.
          schema:
            $ref: '#/definitions/MapsArray'
    post:
      summary: Create a map
      description: |
        Creates a map with the specified name.
      security:
        - oauth: []
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - $ref: '#/parameters/zoneId'
        - $ref: '#/parameters/subtenant'
        - $ref: '#/parameters/mapbody'
      tags:
        - Map
        - View
      responses:
        '200':
          x-predix-response: default
          description: |
            Operation was successful. The identifier of the created map is
            returned.
          schema:
            $ref: '#/definitions/MapCreated'
        '400':
          description: Bad request.
  '/v1/maps/{mapId}':
    get:
      summary: Return map details
      description: |
        For the specified map identifier, returns the map properties and an
        array of the associated layers. For each layer, the identifier, name and
        Uniform Resource Identifier (URI) are returned.
      security:
        - oauth: []
      produces:
        - application/json
      tags:
        - View
        - Map
      parameters:
        - $ref: '#/parameters/zoneId'
        - $ref: '#/parameters/subtenant'
        - $ref: '#/parameters/mapId'
      responses:
        '200':
          x-predix-response: default
          description: >-
            Operation was succesful. A map and an array of its layers is
            returned.
          schema:
            $ref: '#/definitions/Map'
        '404':
          x-predix-response: notfound
          description: No map was found with the the given identifier.
    delete:
      summary: Delete a map
      description: |
        Deletes the map with the specified identifier. Any layers associated
        with the map are also deleted.
      security:
        - oauth: []
      produces:
        - application/json
      tags:
        - View
        - Map
      parameters:
        - $ref: '#/parameters/zoneId'
        - $ref: '#/parameters/subtenant'
        - $ref: '#/parameters/mapId'
      responses:
        '204':
          x-predix-response: default
          description: |
            Operation was successful. The map and its associated layers have
            been deleted.
        '404':
          x-predix-response: notfound
          description: No map was found with the the given identifier.
    put:
      summary: Rename a map
      description: |
        Updates the name of the map that has the specified identifier.
      produces:
        - application/json
      consumes:
        - application/json
      tags:
        - Map
        - View
      security:
        - oauth: []
      parameters:
        - $ref: '#/parameters/mapId'
        - $ref: '#/parameters/zoneId'
        - $ref: '#/parameters/subtenant'
        - $ref: '#/parameters/mapbody'
      responses:
        '204':
          x-predix-response: default
          description: Operation was a success. The map was updated.
        '400':
          description: Bad request.
        '404':
          x-predix-response: notfound
          description: No map was found with the the given identifier.
  '/v1/maps/{mapId}/orderlayers':
    post:
      summary: Update order of layers
      description: |
        Updates the order of layers for a given map.
      produces:
        - application/json
      consumes:
        - application/json
      tags:
        - Map
        - View
      security:
        - oauth: []
      parameters:
        - $ref: '#/parameters/mapId'
        - $ref: '#/parameters/zoneId'
        - $ref: '#/parameters/subtenant'
        - $ref: '#/parameters/layerorder'
      responses:
        '204':
          x-predix-response: default
          description: Operation was a success. The layer orders were updated.
        '400':
          x-predix-response: badrequest
          description: Bad request.
        '404':
          x-predix-response: notfound
          description: No map was found with the the given identifier.
  '/v1/maps/{mapId}/layers':
    post:
      summary: Create a new layer
      description: |
        Creates a new layer and associates it with the specified map.
      security:
        - oauth: []
      produces:
        - application/json
      consumes:
        - application/json
      tags:
        - Layer
        - View
      parameters:
        - $ref: '#/parameters/mapId'
        - $ref: '#/parameters/zoneId'
        - $ref: '#/parameters/subtenant'
        - $ref: '#/parameters/layerbody'
      responses:
        '200':
          x-predix-response: default
          description: >-
            Operation was a success. Response is the identifier of the newly
            created layer.
          schema:
            $ref: '#/definitions/LayerCreated'
        '400':
          description: Invalid request (no contents parameter or invalid schema).
        '404':
          x-predix-response: notfound
          description: No map was found with the the given identifier.
  '/v1/maps/{mapId}/layers/{layerId}':
    get:
      summary: Return layer details
      description: |
        For the layer identified by the map and layer identifiers, returns the
        layer details (identifier, name, Uniform Resource Identifier (URI), and
        visibility).
      security:
        - oauth: []
      produces:
        - application/json
      tags:
        - Layer
        - View
      parameters:
        - $ref: '#/parameters/zoneId'
        - $ref: '#/parameters/subtenant'
        - $ref: '#/parameters/mapId'
        - $ref: '#/parameters/layerId'
      responses:
        '200':
          x-predix-response: default
          description: Operation was successful. The layer properties are returned.
          schema:
            $ref: '#/definitions/Layer'
        '404':
          x-predix-response: notfound
          description: No layer was found for the given map and layer identifiers.
    put:
      summary: Update the layer properties
      description: |
        For the layer identified by the specified map and layer identifiers,
        updates the layer properties.
      tags:
        - Layer
        - View
      security:
        - oauth: []
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - $ref: '#/parameters/zoneId'
        - $ref: '#/parameters/subtenant'
        - $ref: '#/parameters/mapId'
        - $ref: '#/parameters/layerId'
        - $ref: '#/parameters/layerbody'
      responses:
        '204':
          x-predix-response: default
          description: |
            Operation was successful. The layer properties were updated.
        '400':
          description: Bad request.
        '404':
          x-predix-response: notfound
          description: |
            No layer was found for the given map and layer identifiers.
    delete:
      summary: Delete a layer
      description: |
        Deletes the layer identified by the specified map and layer identifiers.
      security:
        - oauth: []
      produces:
        - application/json
      tags:
        - Layer
        - View
      parameters:
        - $ref: '#/parameters/zoneId'
        - $ref: '#/parameters/subtenant'
        - $ref: '#/parameters/mapId'
        - $ref: '#/parameters/layerId'
      responses:
        '204':
          x-predix-response: default
          description: >-
            Operation was successful. The layer and its associated aspects are
            deleted.
        '404':
          x-predix-response: notfound
          description: No layer was found for the given map and layer identifiers.
  '/v1/maps/{mapId}/layers/{layerId}/style':
    get:
      summary: Retrieves style data for a layer
      description: |
        Retrieve style data for the layer identified by the specified map and
        layer identifiers.
      security:
        - oauth: []
      produces:
        - application/json
      tags:
        - Style
        - View
      parameters:
        - $ref: '#/parameters/zoneId'
        - $ref: '#/parameters/subtenant'
        - $ref: '#/parameters/mapId'
        - $ref: '#/parameters/layerId'
      responses:
        '200':
          x-predix-response: default
          description: Operation was successful. Style data for the layer is returned.
          schema:
            $ref: '#/definitions/Style'
        '404':
          x-predix-response: notfound
          description: No layer was found for the given map and layer identifiers.
    put:
      summary: Update the style data for a layer
      description: |
        Update the style data for the layer identified by the specified map and
        layer identifiers.
      tags:
        - Style
        - View
      security:
        - oauth: []
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - $ref: '#/parameters/zoneId'
        - $ref: '#/parameters/subtenant'
        - $ref: '#/parameters/mapId'
        - $ref: '#/parameters/layerId'
        - name: body
          description: Style data.
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          x-predix-response: default
          description: Operation was successful. The style data is updated.
        '400':
          description: Bad request.
        '404':
          x-predix-response: notfound
          description: No layer was found for the given map and layer identifiers.
definitions:
  FeatureCollection:
    type: object
    description: |
      Standard GeoJSON FeatureCollection. All coordinates in ESPG:4326 (WGS84).
  FeatureCollectionWithFeatureId:
    type: object
    description: |
      Standard GeoJSON FeatureCollection with each Feature tagged with a
      featureId.
  Collections:
    type: object
    description: |
      An array of collection names.
    properties:
      collections:
        type: array
        items:
          type: string
  AddCollectionSuccessSchema:
    type: object
    properties:
      total_features:
        type: number
        description: The count of features in the request.
      inserted_features:
        type: number
        description: The count of features added to the database.
      invalid_features:
        type: number
        description: The count of features ignored as invalid.
  UpdateFeaturesSuccessSchema:
    type: object
    properties:
      updated_features:
        type: number
        description: The count of features updated.
  DeleteFeaturesSuccessSchema:
    type: object
    properties:
      deleted_features:
        type: number
        description: The count of features deleted.
  GetCollectionSizeSchema:
    type: object
    properties:
      collection_size:
        type: number
        description: The size of the specified collection.
  QueryGeometry:
    type: object
    description: >
      Geojson geometry, or an object with longitude/latitude. All coordinates in
      ESPG:4326 (WGS84).
    properties:
      geometry:
        type: object
      longitude:
        type: number
      latitude:
        type: number
  MapCreated:
    type: object
    properties:
      id:
        type: string
        format: uuid
  Layer:
    type: object
    required:
      - id
      - name
      - uri
      - visible
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
      uri:
        type: string
      visible:
        type: boolean
    description: |
      Properties of the layer
  Map:
    type: object
    required:
      - id
      - name
      - layers
    properties:
      base_map:
        type: string
      id:
        type: string
        format: uuid
      map_center:
        type: array
        items:
          type: number
      name:
        type: string
      zoom_level:
        type: integer
      layers:
        type: array
        items:
          $ref: '#/definitions/Layer'
    description: |
      Properties of the map
  MapsArray:
    type: array
    items:
      type: object
      required:
        - id
        - name
      properties:
        base_map:
          type: string
        id:
          type: string
          format: uuid
        map_center:
          type: array
          items:
            type: number
        name:
          type: string
        zoom_level:
          type: integer
    description: |
      List of maps without layers.
  LayerCreated:
    type: object
    required:
      - id
    properties:
      id:
        type: string
        format: uuid
  LayerOrderId:
    type: string
    pattern: >-
      ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
    format: uuid
  Style:
    type: object
    description: |
      Definition of the style.
